dropzone.jsの使い方。

dropzone.jsはAjaxを利用した非同期ファイルアップロードライブラリ。
デモを見るとかなりいい感じ。
アップロード中のプログレスバー表示などデザインもちゃんとしている。

ただ、dropzone.jsのデフォルトデザインを活かしたまま、ちょっと手を加えようとすると
ハマってしまったのでメモ。

以下はdropzone.jsのデフォルトデザインを活かしたまま、ちょっと手を加えたい人向けの内容です。

今回はデフォルトのデザインを有効にしたまま以下を実装します。
1.ラベルの文言やアップロードファイルサイズの上限を設定する。
2.ファイルをドロップするエリアとサムネイルをプレビューするエリアを分ける。
3.各種イベントを補足する。

upload.js と index.php を確認しながら説明を見たほうがいいと思います。


1.ラベルの文言やアップロードファイルサイズの上限を設定する。
これは簡単。
dropzoneオブジェクトにプロパティを設定するだけ。
サンプルソースだと「URL」「サムネイルの大きさ」「アップロード上限サイズ」などを設定している。
公式ドキュメント通り設定すればOK。(英語だけど、頑張って読む)


2.ファイルをドロップするエリアとサムネイルをプレビューするエリアを分ける。
プレビューエリアは「previewsContainer」で設定できる。
CSSセレクター記法でOK。
今回はdivを指定している。
デフォルトCSSを有効にするにはプレビューのdivに class="dropzone" を指定する必要があるが、
class="dropzone" があると、dropzone.jsが自動的にアップロードフォームを作成してしまうので、
dropzone.jsの読み込み段階でエラーになってしまう。
つまり、アップロード用のdivがあるのに、プレビュー用のdivに class="dropzone" を指定できない。
なので、デフォルトCSSの「.dropzone」を「.dropzone-custom」に変更し、
プレビュー用divも class="dropzone-custom"にする。
こうするとCSSが効く。


3.各種イベントを補足する。
各種イベントはdropzoneオブジェクトに「success」「error」などのプロパティを設定し、
無名関数にしてやれば補足できる。
ただ、イベントを補足するとDOM操作が実行されなくなった。
removedfileイベントを補足するとプレビューが削除されなくなる。
これは各種イベントをdropzoneオブジェクトに設定したために
オーバーライドされているっぽい。
なので、設定した各種イベントにDOM操作を実装してあげると（当然）ちゃんと動く。


